// Code generated by tygo. DO NOT EDIT.

//////////
// source: gpu_group.go

export interface GpuGroupRead {
  id: string;
  name: string;
  displayName: string;
  zone: string;
  vendor: string;
  total: number /* int */;
  available: number /* int */;
}

//////////
// source: gpu_lease.go

export interface GpuLeaseGpuGroup {
  id: string;
  name: string;
  displayName: string;
}
export interface GpuLeaseRead {
  id: string;
  vmId: string;
  gpuGroupId: string;
  active: boolean;
  queuePosition: number /* int */;
  /**
   * ActivatedAt specifies the time when the lease was activated. This is the time the user first attached the GPU
   * or 1 day after the lease was created if the user did not attach the GPU.
   */
  activatedAt?: string;
  /**
   * AssignedAt specifies the time when the lease was assigned to the user.
   */
  assignedAt?: string;
  createdAt: string;
  expiredAt?: string;
}
export interface GpuLeaseCreate {
  /**
   * GpuGroupID is used to specify the GPU to lease.
   * As such, the lease does not specify which specific GPU to lease, but rather the type of GPU to lease.
   */
  gpuGroupId: string;
  /**
   * LeaseForever is used to specify whether the lease should be created forever.
   */
  leaseForever: boolean;
}
export interface GpuLeaseUpdate {
  /**
   * Active is used to specify whether the lease should be active.
   * It is not possible to un-activate a lease.
   */
  active: boolean;
}
export interface GpuLeaseCreated {
  id: string;
  jobId: string;
}
export interface GpuLeaseUpdated {
  id: string;
  jobId: string;
}
export interface GpuLeaseDeleted {
  id: string;
  jobId: string;
}

//////////
// source: snapshot.go

export interface VmSnapshotRead {
  id: string;
  name: string;
  status: string;
  created: string;
}
export interface VmSnapshotCreate {
  name: string;
}
export interface VmSnapshotCreated {
  id: string;
  jobId: string;
}
export interface VmSnapshotDeleted {
  id: string;
  jobId: string;
}

//////////
// source: vm.go

export interface VmRead {
  id: string;
  name: string;
  ownerId: string;
  zone: string;
  host?: string;
  createdAt: string;
  updatedAt?: string;
  repairedAt?: string;
  specs?: Specs;
  ports: PortRead[];
  gpu_repo?: VmGpuLease;
  sshPublicKey: string;
  teams: string[];
  status: string;
  sshConnectionString?: string;
}
export interface VmCreate {
  name: string;
  sshPublicKey: string;
  ports: PortCreate[];
  cpuCores: number /* int */;
  ram: number /* int */;
  diskSize: number /* int */;
  zone?: string;
}
export interface VmUpdate {
  ports?: PortUpdate[];
  cpuCores?: number /* int */;
  ram?: number /* int */;
  /**
   * Name is used to rename a VM.
   * If specified, only name will be updated.
   */
  name?: string;
  /**
   * OwnerID is used to initiate transfer a VM to another user.
   * If specified, only the transfer will happen.
   * If specified but empty, the transfer will be canceled.
   */
  ownerId?: string;
  /**
   * TransferCode is used to accept transfer of a VM.
   * If specified, only the transfer will happen.
   */
  transferCode?: string;
  /**
   * SnapshotID is used to apply snapshot to a VM.
   * If specified, only the snapshot application will happen.
   */
  snapshotId?: string;
  /**
   * GpuID is used to attach/detach a GPU to a VM.
   * If specified and not empty, only the GPU will be attached.
   * If specified and empty, only the GPU will be detached.
   */
  gpuId?: string;
}
export interface VmUpdateOwner {
  newOwnerId: string;
  oldOwnerId: string;
  transferCode?: string;
}
export interface VmGpuLease {
  id: string;
  name: string;
  leaseEndAt?: string;
  isExpired: boolean;
}
export interface Specs {
  cpuCores?: number /* int */;
  ram?: number /* int */;
  diskSize?: number /* int */;
}
export interface VmCreated {
  id: string;
  jobId: string;
}
export interface VmDeleted {
  id: string;
  jobId: string;
}
export interface VmUpdated {
  id: string;
  jobId?: string;
}

//////////
// source: vm_action.go

export interface VmActionCreate {
  action: string;
}
export interface VmActionCreated {
  id: string;
  jobId: string;
}

//////////
// source: vm_port.go

export interface PortRead {
  name?: string;
  port?: number /* int */;
  externalPort?: number /* int */;
  protocol?: string;
  httpProxy?: HttpProxyRead;
}
export interface PortCreate {
  name: string;
  port: number /* int */;
  protocol: string;
  httpProxy?: HttpProxyCreate;
}
export interface PortUpdate {
  name?: string;
  port?: number /* int */;
  protocol?: string;
  httpProxy?: HttpProxyUpdate;
}
export interface CustomDomainRead {
  domain: string;
  url: string;
  status: string;
  secret: string;
}
export interface HttpProxyRead {
  name: string;
  url?: string;
  customDomain?: CustomDomainRead;
}
export interface HttpProxyCreate {
  name: string;
  customDomain?: string;
}
export interface HttpProxyUpdate {
  name?: string;
  customDomain?: string;
}
