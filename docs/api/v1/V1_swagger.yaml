openapi: 3.0.1
info:
  title: go-deploy API
  description: This is the API explorer for the go-deploy API. You can use it as a
    reference for the API endpoints.
  termsOfService: http://swagger.io/terms/
  contact:
    name: Support
    url: https://github.com/kthcloud/go-deploy
  license:
    name: MIT License
    url: https://github.com/kthcloud/go-deploy?tab=MIT-1-ov-file#readme
  version: "1.0"
servers:
- url: /
paths:
  /v1/deployments:
    get:
      tags:
      - Deployment
      summary: List deployments
      description: List deployments
      parameters:
      - name: all
        in: query
        description: List all
        schema:
          type: boolean
      - name: userId
        in: query
        description: Filter by user ID
        schema:
          type: string
      - name: shared
        in: query
        description: Include shared
        schema:
          type: boolean
      - name: page
        in: query
        description: Page number
        schema:
          type: integer
      - name: pageSize
        in: query
        description: Number of items per page
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/body.DeploymentRead'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
      security:
      - ApiKeyAuth: []
    post:
      tags:
      - Deployment
      summary: Create deployment
      description: Create deployment
      requestBody:
        description: Deployment body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body.DeploymentCreate'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/body.DeploymentRead'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
      security:
      - ApiKeyAuth: []
      x-codegen-request-body-name: body
  /v1/deployments/{deploymentId}:
    get:
      tags:
      - Deployment
      summary: Get deployment
      description: Get deployment
      parameters:
      - name: deploymentId
        in: path
        description: Deployment ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/body.DeploymentRead'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
      security:
      - ApiKeyAuth: []
    post:
      tags:
      - Deployment
      summary: Update deployment
      description: Update deployment
      parameters:
      - name: deploymentId
        in: path
        description: Deployment ID
        required: true
        schema:
          type: string
      requestBody:
        description: Deployment update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body.DeploymentUpdate'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/body.DeploymentUpdated'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
      security:
      - ApiKeyAuth: []
      x-codegen-request-body-name: body
    delete:
      tags:
      - Deployment
      summary: Delete deployment
      description: Delete deployment
      parameters:
      - name: deploymentId
        in: path
        description: Deployment ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/body.DeploymentCreated'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
      security:
      - ApiKeyAuth: []
  /v1/deployments/{deploymentId}/ciConfig:
    get:
      tags:
      - Deployment
      summary: Get CI config
      description: Get CI config
      parameters:
      - name: deploymentId
        in: path
        description: Deployment ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/body.CiConfig'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
      security:
      - ApiKeyAuth: []
  /v1/deployments/{deploymentId}/command:
    post:
      tags:
      - Deployment
      summary: Do command
      description: Do command
      parameters:
      - name: deploymentId
        in: path
        description: Deployment ID
        required: true
        schema:
          type: string
      requestBody:
        description: Command body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body.DeploymentCommand'
        required: true
      responses:
        "204":
          description: No Content
          content: {}
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "423":
          description: Locked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
      security:
      - ApiKeyAuth: []
      x-codegen-request-body-name: body
  /v1/deployments/{deploymentId}/logs:
    get:
      tags:
      - Deployment
      summary: Get logs using Server-Sent Events
      description: Get logs using Server-Sent Events
      parameters:
      - name: deploymentId
        in: path
        description: Deployment ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
      security:
      - ApiKeyAuth: []
  /v1/discover:
    get:
      tags:
      - Discover
      summary: Discover
      description: Discover
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/body.DiscoverRead'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
  /v1/hooks/harbor:
    post:
      tags:
      - Deployment
      summary: Handle Harbor hook
      description: Handle Harbor hook
      parameters:
      - name: Authorization
        in: header
        description: Basic auth token
        schema:
          type: string
      requestBody:
        description: Harbor webhook body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body.HarborWebhook'
        required: true
      responses:
        "204":
          description: No Content
          content: {}
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
      x-codegen-request-body-name: body
  /v1/jobs:
    get:
      tags:
      - Job
      summary: List jobs
      description: List jobs
      parameters:
      - name: all
        in: query
        description: List all
        schema:
          type: boolean
      - name: userId
        in: query
        description: Filter by user ID
        schema:
          type: string
      - name: type
        in: query
        description: Filter by type
        schema:
          type: string
      - name: status
        in: query
        description: Filter by status
        schema:
          type: string
      - name: page
        in: query
        description: Page number
        schema:
          type: integer
      - name: pageSize
        in: query
        description: Number of items per page
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/body.JobRead'
      security:
      - ApiKeyAuth: []
  /v1/jobs/{jobId}:
    get:
      tags:
      - Job
      summary: GetJob job by id
      description: GetJob job by id
      parameters:
      - name: jobId
        in: path
        description: Job ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/body.JobRead'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
      security:
      - ApiKeyAuth: []
    post:
      tags:
      - Job
      summary: Update job
      description: Update job. Only allowed for admins.
      parameters:
      - name: jobId
        in: path
        description: Job ID
        required: true
        schema:
          type: string
      requestBody:
        description: Job update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body.JobUpdate'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/body.JobRead'
      security:
      - ApiKeyAuth: []
      x-codegen-request-body-name: body
  /v1/metrics:
    get:
      tags:
      - Metrics
      summary: Get metrics
      description: Get metrics
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
  /v1/notifications:
    get:
      tags:
      - Notification
      summary: List notifications
      description: List notifications
      parameters:
      - name: all
        in: query
        description: List all notifications
        schema:
          type: boolean
      - name: userId
        in: query
        description: Filter by user ID
        schema:
          type: string
      - name: page
        in: query
        description: Page number
        schema:
          type: integer
      - name: pageSize
        in: query
        description: Number of items per page
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/body.NotificationRead'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
      security:
      - ApiKeyAuth: []
  /v1/notifications/{notificationId}:
    get:
      tags:
      - Notification
      summary: Get notification
      description: Get notification
      parameters:
      - name: notificationId
        in: path
        description: Notification ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/body.NotificationRead'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
      security:
      - ApiKeyAuth: []
    post:
      tags:
      - Notification
      summary: Update notification
      description: Update notification
      parameters:
      - name: notificationId
        in: path
        description: Notification ID
        required: true
        schema:
          type: string
      requestBody:
        description: Notification update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body.NotificationUpdate'
        required: true
      responses:
        "200":
          description: OK
          content: {}
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
      security:
      - ApiKeyAuth: []
      x-codegen-request-body-name: body
    delete:
      tags:
      - Notification
      summary: Delete notification
      description: Delete notification
      parameters:
      - name: notificationId
        in: path
        description: Notification ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content: {}
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
      security:
      - ApiKeyAuth: []
  /v1/resourceMigrations:
    get:
      tags:
      - ResourceMigration
      summary: List resource migrations
      description: List resource migrations
      parameters:
      - name: page
        in: query
        description: Page number
        schema:
          type: integer
      - name: pageSize
        in: query
        description: Number of items per page
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/body.ResourceMigrationRead'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
      security:
      - ApiKeyAuth: []
    post:
      tags:
      - ResourceMigration
      summary: Create resource migration
      description: Create resource migration
      requestBody:
        description: Resource Migration Create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body.ResourceMigrationCreate'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/body.ResourceMigrationCreated'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
      security:
      - ApiKeyAuth: []
      x-codegen-request-body-name: body
  /v1/resourceMigrations/{resourceMigrationId}:
    get:
      tags:
      - ResourceMigration
      summary: Get resource migration
      description: Get resource migration
      parameters:
      - name: resourceMigrationId
        in: path
        description: Resource Migration ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/body.ResourceMigrationRead'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
      security:
      - ApiKeyAuth: []
    post:
      tags:
      - ResourceMigration
      summary: Update resource migration
      description: Update resource migration
      parameters:
      - name: resourceMigrationId
        in: path
        description: Resource Migration ID
        required: true
        schema:
          type: string
      requestBody:
        description: Resource Migration Update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body.ResourceMigrationUpdate'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/body.ResourceMigrationUpdated'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
      security:
      - ApiKeyAuth: []
      x-codegen-request-body-name: body
    delete:
      tags:
      - ResourceMigration
      summary: Delete resource migration
      description: Delete resource migration
      parameters:
      - name: resourceMigrationId
        in: path
        description: Resource Migration ID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
          content: {}
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
      security:
      - ApiKeyAuth: []
  /v1/status:
    get:
      tags:
      - Status
      summary: List worker status
      description: List of worker status
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/body.WorkerStatusRead'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
  /v1/storageManagers:
    get:
      tags:
      - StorageManager
      summary: Get storage manager list
      description: Get storage manager list
      parameters:
      - name: all
        in: query
        description: List all
        schema:
          type: boolean
      - name: page
        in: query
        description: Page number
        schema:
          type: integer
      - name: pageSize
        in: query
        description: Number of items per page
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/body.SmRead'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
      security:
      - ApiKeyAuth: []
  /v1/storageManagers/{storageManagerId}:
    get:
      tags:
      - StorageManager
      summary: Delete storage manager
      description: Delete storage manager
      parameters:
      - name: storageManagerId
        in: path
        description: Storage manager ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/body.SmDeleted'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
      security:
      - ApiKeyAuth: []
  /v1/teams:
    get:
      tags:
      - Team
      summary: List teams
      description: List teams
      parameters:
      - name: all
        in: query
        description: List all
        schema:
          type: boolean
      - name: userId
        in: query
        description: Filter by user ID
        schema:
          type: string
      - name: page
        in: query
        description: Page number
        schema:
          type: integer
      - name: pageSize
        in: query
        description: Number of items per page
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/body.TeamRead'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/body.BindingError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
      security:
      - ApiKeyAuth: []
    post:
      tags:
      - Team
      summary: Create team
      description: Create team
      requestBody:
        description: Team
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body.TeamCreate'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/body.TeamRead'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/body.BindingError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
      security:
      - ApiKeyAuth: []
      x-codegen-request-body-name: body
  /v1/teams/{teamId}:
    get:
      tags:
      - Team
      summary: Get team
      description: Get team
      parameters:
      - name: teamId
        in: path
        description: Team ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/body.TeamRead'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/body.BindingError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
      security:
      - ApiKeyAuth: []
    post:
      tags:
      - Team
      summary: Update team
      description: Update team
      parameters:
      - name: teamId
        in: path
        description: Team ID
        required: true
        schema:
          type: string
      requestBody:
        description: Team
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body.TeamUpdate'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/body.TeamRead'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/body.BindingError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
      security:
      - ApiKeyAuth: []
      x-codegen-request-body-name: body
    delete:
      tags:
      - Team
      summary: Delete team
      description: Delete team
      parameters:
      - name: teamId
        in: path
        description: Team ID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
          content: {}
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/body.BindingError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
      security:
      - ApiKeyAuth: []
  /v1/users:
    get:
      tags:
      - User
      summary: List users
      description: List users
      parameters:
      - name: all
        in: query
        description: List all
        schema:
          type: boolean
      - name: discover
        in: query
        description: Discovery mode
        schema:
          type: boolean
      - name: search
        in: query
        description: Search query
        schema:
          type: string
      - name: page
        in: query
        description: Page number
        schema:
          type: integer
      - name: pageSize
        in: query
        description: Number of items per page
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/body.UserRead'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
      security:
      - ApiKeyAuth: []
  /v1/users/{userId}:
    get:
      tags:
      - User
      summary: Get user
      description: Get user
      parameters:
      - name: userId
        in: path
        description: User ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/body.UserRead'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
      security:
      - ApiKeyAuth: []
    post:
      tags:
      - User
      summary: Update user
      description: Update user
      parameters:
      - name: userId
        in: path
        description: User ID
        required: true
        schema:
          type: string
      requestBody:
        description: User update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body.UserUpdate'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/body.UserRead'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
      security:
      - ApiKeyAuth: []
      x-codegen-request-body-name: body
  /v1/users/{userId}/apiKeys:
    post:
      tags:
      - User
      summary: Create API key
      description: Create API key
      parameters:
      - name: userId
        in: path
        description: User ID
        required: true
        schema:
          type: string
      requestBody:
        description: API key create body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body.ApiKeyCreate'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/body.ApiKeyCreated'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
      security:
      - ApiKeyAuth: []
      x-codegen-request-body-name: body
  /v1/vms:
    get:
      tags:
      - VM
      summary: List VMs
      description: List VMs
      parameters:
      - name: all
        in: query
        description: List all
        schema:
          type: boolean
      - name: userId
        in: query
        description: Filter by user ID
        schema:
          type: string
      - name: page
        in: query
        description: Page number
        schema:
          type: integer
      - name: pageSize
        in: query
        description: Number of items per page
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/go-deploy_dto_v1_body.VmRead'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
      security:
      - ApiKeyAuth: []
    post:
      tags:
      - VM
      summary: Create VM
      description: Create VM
      requestBody:
        description: VM body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/go-deploy_dto_v1_body.VmCreate'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/go-deploy_dto_v1_body.VmCreated'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "423":
          description: Locked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
      security:
      - ApiKeyAuth: []
      x-codegen-request-body-name: body
  /v1/vms/{vmId}:
    get:
      tags:
      - VM
      summary: Get VM
      description: Get VM
      parameters:
      - name: vmId
        in: path
        description: VM ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/go-deploy_dto_v1_body.VmRead'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
      security:
      - ApiKeyAuth: []
    post:
      tags:
      - VM
      summary: UpdateVM VM
      description: UpdateVM VM
      parameters:
      - name: vmId
        in: path
        description: VM ID
        required: true
        schema:
          type: string
      requestBody:
        description: VM update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/go-deploy_dto_v1_body.VmUpdate'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/go-deploy_dto_v1_body.VmUpdated'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "423":
          description: Locked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
      security:
      - ApiKeyAuth: []
      x-codegen-request-body-name: body
    delete:
      tags:
      - VM
      summary: DeleteVM VM
      description: DeleteVM VM
      parameters:
      - name: vmId
        in: path
        description: VM ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/go-deploy_dto_v1_body.VmDeleted'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "423":
          description: Locked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
      security:
      - ApiKeyAuth: []
  /v1/vms/{vmId}/command:
    post:
      tags:
      - VM
      summary: Do command
      description: Do command
      parameters:
      - name: vmId
        in: path
        description: VM ID
        required: true
        schema:
          type: string
      requestBody:
        description: Command body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body.VmCommand'
        required: true
      responses:
        "204":
          description: No Content
          content: {}
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "423":
          description: Locked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
      security:
      - ApiKeyAuth: []
      x-codegen-request-body-name: body
  /v1/vms/{vmId}/snapshot/{snapshotId}:
    post:
      tags:
      - VM
      summary: Get snapshot
      description: Get snapshot
      parameters:
      - name: vmId
        in: path
        description: VM ID
        required: true
        schema:
          type: string
      - name: snapshotId
        in: path
        description: Snapshot ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/go-deploy_dto_v1_body.VmSnapshotRead'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
      security:
      - ApiKeyAuth: []
    delete:
      tags:
      - VM
      summary: Delete snapshot
      description: Delete snapshot
      parameters:
      - name: vmId
        in: path
        description: VM ID
        required: true
        schema:
          type: string
      - name: snapshotId
        in: path
        description: Snapshot ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/go-deploy_dto_v1_body.VmSnapshotRead'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
      security:
      - ApiKeyAuth: []
  /v1/vms/{vmId}/snapshots:
    get:
      tags:
      - VM
      summary: List snapshots
      description: List snapshots
      parameters:
      - name: vmId
        in: path
        description: VM ID
        required: true
        schema:
          type: string
      - name: page
        in: query
        description: Page number
        schema:
          type: integer
      - name: pageSize
        in: query
        description: Number of items per page
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/go-deploy_dto_v1_body.VmSnapshotRead'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "423":
          description: Locked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
      security:
      - ApiKeyAuth: []
    post:
      tags:
      - VM
      summary: Create snapshot
      description: Create snapshot
      parameters:
      - name: vmId
        in: path
        description: VM ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/go-deploy_dto_v1_body.VmSnapshotRead'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
      security:
      - ApiKeyAuth: []
  /v1/vms/gpus:
    get:
      tags:
      - VM
      summary: Get list of GPUs
      description: Get list of GPUs
      parameters:
      - name: available
        in: query
        description: Only show available GPUs
        schema:
          type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/body.GpuRead'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "423":
          description: Locked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
      security:
      - ApiKeyAuth: []
  /v1/zones:
    get:
      tags:
      - Zone
      summary: List zones
      description: List zones
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/body.ZoneRead'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys.ErrorResponse'
      security:
      - ApiKeyAuth: []
components:
  schemas:
    body.ApiKey:
      type: object
      properties:
        createdAt:
          type: string
        expiresAt:
          type: string
        name:
          type: string
    body.ApiKeyCreate:
      required:
      - expiresAt
      - name
      type: object
      properties:
        expiresAt:
          type: string
        name:
          type: string
    body.ApiKeyCreated:
      type: object
      properties:
        createdAt:
          type: string
        expiresAt:
          type: string
        key:
          type: string
        name:
          type: string
    body.BindingError:
      type: object
      properties:
        validationErrors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
    body.CiConfig:
      type: object
      properties:
        config:
          type: string
    body.DeploymentCommand:
      required:
      - command
      type: object
      properties:
        command:
          type: string
          enum:
          - restart
    body.DeploymentCreate:
      required:
      - name
      type: object
      properties:
        args:
          maxItems: 100
          minItems: 0
          type: array
          items:
            type: string
        customDomain:
          type: string
          description: |-
            CustomDomain is the domain that the deployment will be available on.
            The max length is set to 243 to allow for a sub domain when confirming the domain.
        envs:
          maxItems: 1000
          minItems: 0
          type: array
          items:
            $ref: '#/components/schemas/body.Env'
        healthCheckPath:
          maxLength: 1000
          minLength: 0
          type: string
        image:
          maxLength: 1000
          minLength: 1
          type: string
        initCommands:
          maxItems: 100
          minItems: 0
          type: array
          items:
            type: string
        name:
          maxLength: 30
          minLength: 3
          type: string
        private:
          type: boolean
        replicas:
          maximum: 100
          minimum: 0
          type: integer
        volumes:
          maxItems: 100
          minItems: 0
          type: array
          items:
            $ref: '#/components/schemas/body.Volume'
        zone:
          type: string
    body.DeploymentCreated:
      type: object
      properties:
        id:
          type: string
        jobId:
          type: string
    body.DeploymentRead:
      type: object
      properties:
        args:
          type: array
          items:
            type: string
        createdAt:
          type: string
        customDomain:
          type: string
        customDomainSecret:
          type: string
        customDomainStatus:
          type: string
        customDomainUrl:
          type: string
        envs:
          type: array
          items:
            $ref: '#/components/schemas/body.Env'
        error:
          type: string
        healthCheckPath:
          type: string
        id:
          type: string
        image:
          type: string
        initCommands:
          type: array
          items:
            type: string
        integrations:
          type: array
          description: |-
            Integrations are currently not used, but could be used if we wanted to add a list of integrations to the deployment

            For example GitHub
          items:
            type: string
        internalPort:
          type: integer
        name:
          type: string
        ownerId:
          type: string
        pingResult:
          type: integer
        private:
          type: boolean
        repairedAt:
          type: string
        replicas:
          type: integer
        restartedAt:
          type: string
        status:
          type: string
        storageUrl:
          type: string
        teams:
          type: array
          items:
            type: string
        type:
          type: string
        updatedAt:
          type: string
        url:
          type: string
        volumes:
          type: array
          items:
            $ref: '#/components/schemas/body.Volume'
        zone:
          type: string
    body.DeploymentUpdate:
      required:
      - name
      type: object
      properties:
        args:
          maxItems: 100
          minItems: 0
          type: array
          items:
            type: string
        customDomain:
          maxLength: 253
          minLength: 0
          type: string
        envs:
          maxItems: 1000
          minItems: 0
          type: array
          items:
            $ref: '#/components/schemas/body.Env'
        healthCheckPath:
          maxLength: 1000
          minLength: 0
          type: string
        image:
          maxLength: 1000
          minLength: 1
          type: string
        initCommands:
          maxItems: 100
          minItems: 0
          type: array
          items:
            type: string
        name:
          maxLength: 30
          minLength: 3
          type: string
          description: update
        private:
          type: boolean
        replicas:
          maximum: 100
          minimum: 0
          type: integer
        volumes:
          maxItems: 100
          minItems: 0
          type: array
          items:
            $ref: '#/components/schemas/body.Volume'
    body.DeploymentUpdated:
      type: object
      properties:
        id:
          type: string
        jobId:
          type: string
    body.DiscoverRead:
      type: object
      properties:
        roles:
          type: array
          items:
            $ref: '#/components/schemas/body.Role'
        version:
          type: string
    body.Env:
      required:
      - name
      - value
      type: object
      properties:
        name:
          maxLength: 100
          minLength: 1
          type: string
        value:
          maxLength: 10000
          minLength: 1
          type: string
    body.GpuRead:
      type: object
      properties:
        id:
          type: string
        lease:
          $ref: '#/components/schemas/body.Lease'
        name:
          type: string
        zone:
          type: string
    body.HarborWebhook:
      type: object
      properties:
        event_data:
          type: object
          properties:
            repository:
              type: object
              properties:
                date_created:
                  type: integer
                name:
                  type: string
                namespace:
                  type: string
                repo_full_name:
                  type: string
                repo_type:
                  type: string
            resources:
              type: array
              items:
                type: object
                properties:
                  digest:
                    type: string
                  resource_url:
                    type: string
                  tag:
                    type: string
        occur_at:
          type: integer
        operator:
          type: string
        type:
          type: string
    body.JobRead:
      type: object
      properties:
        createdAt:
          type: string
        finishedAt:
          type: string
        id:
          type: string
        lastError:
          type: string
        lastRunAt:
          type: string
        runAfter:
          type: string
        status:
          type: string
        type:
          type: string
        userId:
          type: string
    body.JobUpdate:
      type: object
      properties:
        status:
          type: string
          enum:
          - pending
          - running
          - failed
          - terminated
          - finished
          - completed
    body.Lease:
      type: object
      properties:
        end:
          type: string
        expired:
          type: boolean
        user:
          type: string
        vmId:
          type: string
    body.NotificationRead:
      type: object
      properties:
        completedAt:
          type: string
        content:
          type: object
          additionalProperties: true
        createdAt:
          type: string
        id:
          type: string
        readAt:
          type: string
        type:
          type: string
        userId:
          type: string
    body.NotificationUpdate:
      type: object
      properties:
        read:
          type: boolean
    body.PublicKey:
      required:
      - key
      - name
      type: object
      properties:
        key:
          type: string
        name:
          maxLength: 30
          minLength: 1
          type: string
    body.Quota:
      type: object
      properties:
        cpuCores:
          type: integer
        deployments:
          type: integer
        diskSize:
          type: integer
        gpuLeaseDuration:
          type: number
          description: in hours
        ram:
          type: integer
        snapshots:
          type: integer
    body.ResourceMigrationCreate:
      required:
      - resourceID
      - type
      type: object
      properties:
        resourceID:
          type: string
        status:
          type: string
        type:
          type: string
        updateOwner:
          required:
          - ownerId
          type: object
          properties:
            ownerId:
              type: string
    body.ResourceMigrationCreated:
      type: object
      properties:
        createdAt:
          type: string
        deletedAt:
          type: string
        id:
          type: string
        jobId:
          type: string
          description: |-
            JobID is the ID of the job that was created for the resource migration.
            Only if the migration was created with status 'accepted' a job will be created.
        resourceId:
          type: string
        resourceType:
          type: string
        status:
          type: string
        type:
          type: string
        updateOwner:
          type: object
          properties:
            ownerId:
              type: string
        userId:
          type: string
    body.ResourceMigrationRead:
      type: object
      properties:
        createdAt:
          type: string
        deletedAt:
          type: string
        id:
          type: string
        resourceId:
          type: string
        resourceType:
          type: string
        status:
          type: string
        type:
          type: string
        updateOwner:
          type: object
          properties:
            ownerId:
              type: string
        userId:
          type: string
    body.ResourceMigrationUpdate:
      required:
      - status
      type: object
      properties:
        code:
          type: string
        status:
          type: string
    body.ResourceMigrationUpdated:
      type: object
      properties:
        createdAt:
          type: string
        deletedAt:
          type: string
        id:
          type: string
        jobId:
          type: string
          description: |-
            JobID is the ID of the job that was created for the resource migration.
            Only if the migration was updated with status 'accepted' a job will be created.
        resourceId:
          type: string
        resourceType:
          type: string
        status:
          type: string
        type:
          type: string
        updateOwner:
          type: object
          properties:
            ownerId:
              type: string
        userId:
          type: string
    body.Role:
      type: object
      properties:
        description:
          type: string
        name:
          type: string
        permissions:
          type: array
          items:
            type: string
        quota:
          $ref: '#/components/schemas/body.Quota'
    body.SmDeleted:
      type: object
      properties:
        id:
          type: string
        jobId:
          type: string
    body.SmRead:
      type: object
      properties:
        createdAt:
          type: string
        id:
          type: string
        ownerId:
          type: string
        url:
          type: string
        zone:
          type: string
    body.TeamCreate:
      required:
      - name
      type: object
      properties:
        description:
          maxLength: 1000
          type: string
        members:
          maxItems: 10
          minItems: 0
          type: array
          items:
            $ref: '#/components/schemas/body.TeamMemberCreate'
        name:
          maxLength: 100
          minLength: 1
          type: string
        resources:
          maxItems: 10
          minItems: 0
          type: array
          items:
            type: string
    body.TeamMember:
      type: object
      properties:
        addedAt:
          type: string
        email:
          type: string
        firstName:
          type: string
        gravatarUrl:
          type: string
        id:
          type: string
        joinedAt:
          type: string
        lastName:
          type: string
        memberStatus:
          type: string
        teamRole:
          type: string
        username:
          type: string
    body.TeamMemberCreate:
      required:
      - id
      type: object
      properties:
        id:
          type: string
        teamRole:
          type: string
          description: default to MemberRoleAdmin right now
    body.TeamMemberUpdate:
      required:
      - id
      type: object
      properties:
        id:
          type: string
        teamRole:
          type: string
          description: default to MemberRoleAdmin right now
    body.TeamRead:
      type: object
      properties:
        createdAt:
          type: string
        description:
          type: string
        id:
          type: string
        members:
          type: array
          items:
            $ref: '#/components/schemas/body.TeamMember'
        name:
          type: string
        ownerId:
          type: string
        resources:
          type: array
          items:
            $ref: '#/components/schemas/body.TeamResource'
        updatedAt:
          type: string
    body.TeamResource:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
    body.TeamUpdate:
      type: object
      properties:
        description:
          maxLength: 1000
          type: string
        members:
          maxItems: 10
          minItems: 0
          type: array
          items:
            $ref: '#/components/schemas/body.TeamMemberUpdate'
        name:
          maxLength: 100
          minLength: 1
          type: string
        resources:
          maxItems: 10
          minItems: 0
          type: array
          items:
            type: string
    body.Usage:
      type: object
      properties:
        cpuCores:
          type: integer
        deployments:
          type: integer
        diskSize:
          type: integer
        ram:
          type: integer
        snapshots:
          type: integer
    body.UserData:
      required:
      - key
      - value
      type: object
      properties:
        key:
          maxLength: 255
          minLength: 1
          type: string
        value:
          maxLength: 255
          minLength: 1
          type: string
    body.UserRead:
      type: object
      properties:
        admin:
          type: boolean
        apiKeys:
          type: array
          items:
            $ref: '#/components/schemas/body.ApiKey'
        email:
          type: string
        firstName:
          type: string
        gravatarUrl:
          type: string
        id:
          type: string
        lastName:
          type: string
        publicKeys:
          type: array
          items:
            $ref: '#/components/schemas/body.PublicKey'
        quota:
          $ref: '#/components/schemas/body.Quota'
        role:
          $ref: '#/components/schemas/body.Role'
        storageUrl:
          type: string
        usage:
          $ref: '#/components/schemas/body.Usage'
        userData:
          type: array
          items:
            $ref: '#/components/schemas/body.UserData'
        username:
          type: string
    body.UserUpdate:
      type: object
      properties:
        apiKeys:
          maxItems: 100
          minItems: 0
          type: array
          description: |-
            ApiKeys specifies the API keys that should remain. If an API key is not in this list, it will be deleted.
            However, API keys cannot be created, use /apiKeys endpoint to create new API keys.
          items:
            $ref: '#/components/schemas/body.ApiKey'
        publicKeys:
          maxItems: 100
          minItems: 0
          type: array
          items:
            $ref: '#/components/schemas/body.PublicKey'
        userData:
          maxItems: 100
          minItems: 0
          type: array
          items:
            $ref: '#/components/schemas/body.UserData'
    body.VmCommand:
      required:
      - command
      type: object
      properties:
        command:
          type: string
          enum:
          - start
          - stop
          - reboot
    body.Volume:
      required:
      - appPath
      - name
      - serverPath
      type: object
      properties:
        appPath:
          maxLength: 255
          minLength: 1
          type: string
        name:
          maxLength: 30
          minLength: 3
          type: string
        serverPath:
          maxLength: 255
          minLength: 1
          type: string
    body.WorkerStatusRead:
      type: object
      properties:
        name:
          type: string
        reportedAt:
          type: string
        status:
          type: string
    body.ZoneEndpoints:
      type: object
      properties:
        deployment:
          type: string
        storage:
          type: string
        vm:
          type: string
        vmApp:
          type: string
    body.ZoneRead:
      type: object
      properties:
        capabilities:
          type: array
          items:
            type: string
        description:
          type: string
        enabled:
          type: boolean
        endpoints:
          $ref: '#/components/schemas/body.ZoneEndpoints'
        interface:
          type: string
          description: |-
            Interface
            Deprecated: use Endpoints instead
        legacy:
          type: boolean
        name:
          type: string
        type:
          type: string
          description: |-
            Type
            Deprecated: use Capabilities instead
    go-deploy_dto_v1_body.HttpProxyCreate:
      required:
      - name
      type: object
      properties:
        customDomain:
          type: string
        name:
          maxLength: 30
          minLength: 3
          type: string
    go-deploy_dto_v1_body.HttpProxyRead:
      required:
      - name
      type: object
      properties:
        customDomain:
          type: string
        customDomainSecret:
          type: string
        customDomainStatus:
          type: string
        customDomainUrl:
          type: string
        name:
          maxLength: 30
          minLength: 3
          type: string
        url:
          type: string
    go-deploy_dto_v1_body.HttpProxyUpdate:
      required:
      - name
      type: object
      properties:
        customDomain:
          type: string
        name:
          maxLength: 30
          minLength: 3
          type: string
    go-deploy_dto_v1_body.PortCreate:
      required:
      - name
      - port
      - protocol
      type: object
      properties:
        httpProxy:
          $ref: '#/components/schemas/go-deploy_dto_v1_body.HttpProxyCreate'
        name:
          maxLength: 100
          minLength: 1
          type: string
        port:
          maximum: 65535
          minimum: 1
          type: integer
        protocol:
          type: string
          enum:
          - tcp
          - udp
    go-deploy_dto_v1_body.PortRead:
      type: object
      properties:
        externalPort:
          type: integer
        httpProxy:
          $ref: '#/components/schemas/go-deploy_dto_v1_body.HttpProxyRead'
        name:
          type: string
        port:
          type: integer
        protocol:
          type: string
    go-deploy_dto_v1_body.PortUpdate:
      required:
      - name
      - port
      - protocol
      type: object
      properties:
        httpProxy:
          $ref: '#/components/schemas/go-deploy_dto_v1_body.HttpProxyUpdate'
        name:
          maxLength: 100
          minLength: 1
          type: string
        port:
          maximum: 65535
          minimum: 1
          type: integer
        protocol:
          type: string
          enum:
          - tcp
          - udp
    go-deploy_dto_v1_body.Specs:
      type: object
      properties:
        cpuCores:
          type: integer
        diskSize:
          type: integer
        ram:
          type: integer
    go-deploy_dto_v1_body.VmCreate:
      required:
      - cpuCores
      - diskSize
      - name
      - ram
      - sshPublicKey
      type: object
      properties:
        cpuCores:
          minimum: 2
          type: integer
        diskSize:
          minimum: 20
          type: integer
        name:
          maxLength: 30
          minLength: 3
          type: string
        ports:
          maxItems: 10
          minItems: 0
          type: array
          items:
            $ref: '#/components/schemas/go-deploy_dto_v1_body.PortCreate'
        ram:
          minimum: 1
          type: integer
        sshPublicKey:
          type: string
        zone:
          type: string
    go-deploy_dto_v1_body.VmCreated:
      type: object
      properties:
        id:
          type: string
        jobId:
          type: string
    go-deploy_dto_v1_body.VmDeleted:
      type: object
      properties:
        id:
          type: string
        jobId:
          type: string
    go-deploy_dto_v1_body.VmGpuLease:
      type: object
      properties:
        expired:
          type: boolean
        id:
          type: string
        leaseEnd:
          type: string
        name:
          type: string
    go-deploy_dto_v1_body.VmRead:
      type: object
      properties:
        connectionString:
          type: string
        createdAt:
          type: string
        gpu:
          $ref: '#/components/schemas/go-deploy_dto_v1_body.VmGpuLease'
        host:
          type: string
        id:
          type: string
        name:
          type: string
        ownerId:
          type: string
        ports:
          type: array
          items:
            $ref: '#/components/schemas/go-deploy_dto_v1_body.PortRead'
        repairedAt:
          type: string
        specs:
          $ref: '#/components/schemas/go-deploy_dto_v1_body.Specs'
        sshPublicKey:
          type: string
        status:
          type: string
        teams:
          type: array
          items:
            type: string
        updatedAt:
          type: string
        zone:
          type: string
    go-deploy_dto_v1_body.VmSnapshotRead:
      type: object
      properties:
        created:
          type: string
        current:
          type: boolean
        displayName:
          type: string
        id:
          type: string
        parentName:
          type: string
        state:
          type: string
        vmId:
          type: string
    go-deploy_dto_v1_body.VmUpdate:
      type: object
      properties:
        cpuCores:
          minimum: 1
          type: integer
        gpuId:
          maxLength: 100
          minLength: 0
          type: string
        name:
          maxLength: 30
          minLength: 3
          type: string
        noLeaseEnd:
          type: boolean
        ports:
          maxItems: 10
          minItems: 0
          type: array
          items:
            $ref: '#/components/schemas/go-deploy_dto_v1_body.PortUpdate'
        ram:
          minimum: 1
          type: integer
        snapshotId:
          type: string
    go-deploy_dto_v1_body.VmUpdated:
      type: object
      properties:
        id:
          type: string
        jobId:
          type: string
    sys.Error:
      type: object
      properties:
        code:
          type: string
        msg:
          type: string
    sys.ErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/sys.Error'
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: X-Api-Key
      in: header
x-original-swagger-version: "2.0"
