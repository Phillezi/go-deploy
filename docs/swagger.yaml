definitions:
  auth.KeycloakToken:
    properties:
      acr:
        type: string
      allowed-origins:
        items:
          type: string
        type: array
      auth_time:
        type: integer
      azp:
        type: string
      client_session:
        type: string
      email:
        type: string
      exp:
        type: integer
      family_name:
        type: string
      given_name:
        type: string
      groups:
        items:
          type: string
        type: array
      iat:
        type: integer
      iss:
        type: string
      jti:
        type: string
      name:
        type: string
      nbf:
        type: integer
      nonce:
        type: string
      preferred_username:
        type: string
      realm_access:
        $ref: '#/definitions/auth.ServiceRole'
      resource_access:
        additionalProperties:
          $ref: '#/definitions/auth.ServiceRole'
        type: object
      session_state:
        type: string
      sub:
        type: string
      typ:
        type: string
    type: object
  auth.ServiceRole:
    properties:
      roles:
        items:
          type: string
        type: array
    type: object
  body.BindingError:
    properties:
      validationErrors:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
    type: object
  body.CiConfig:
    properties:
      config:
        type: string
    type: object
  body.DeploymentCommand:
    properties:
      command:
        enum:
        - restart
        type: string
    required:
    - command
    type: object
  body.DeploymentCreate:
    properties:
      customDomain:
        maxLength: 253
        minLength: 1
        type: string
      envs:
        items:
          $ref: '#/definitions/body.Env'
        maxItems: 1000
        minItems: 0
        type: array
      github:
        $ref: '#/definitions/body.GitHub'
      healthCheckPath:
        maxLength: 1000
        minLength: 0
        type: string
      image:
        maxLength: 1000
        minLength: 1
        type: string
      initCommands:
        items:
          type: string
        maxItems: 100
        minItems: 0
        type: array
      name:
        maxLength: 30
        minLength: 3
        type: string
      private:
        type: boolean
      volumes:
        items:
          $ref: '#/definitions/body.Volume'
        maxItems: 100
        minItems: 0
        type: array
      zone:
        type: string
    required:
    - name
    type: object
  body.DeploymentCreated:
    properties:
      id:
        type: string
      jobId:
        type: string
    type: object
  body.DeploymentRead:
    properties:
      customDomainUrl:
        type: string
      envs:
        items:
          $ref: '#/definitions/body.Env'
        type: array
      id:
        type: string
      image:
        type: string
      initCommands:
        items:
          type: string
        type: array
      integrations:
        items:
          type: string
        type: array
      internalPort:
        type: integer
      name:
        type: string
      ownerId:
        type: string
      pingResult:
        type: integer
      private:
        type: boolean
      status:
        type: string
      storageUrl:
        type: string
      type:
        type: string
      url:
        type: string
      volumes:
        items:
          $ref: '#/definitions/body.Volume'
        type: array
      zone:
        type: string
    type: object
  body.DeploymentUpdate:
    properties:
      customDomain:
        maxLength: 253
        minLength: 0
        type: string
      envs:
        items:
          $ref: '#/definitions/body.Env'
        maxItems: 1000
        minItems: 0
        type: array
      healthCheckPath:
        maxLength: 1000
        minLength: 0
        type: string
      image:
        maxLength: 1000
        minLength: 1
        type: string
      initCommands:
        items:
          type: string
        maxItems: 100
        minItems: 0
        type: array
      private:
        type: boolean
      volumes:
        items:
          $ref: '#/definitions/body.Volume'
        maxItems: 100
        minItems: 0
        type: array
    type: object
  body.DeploymentUpdated:
    properties:
      id:
        type: string
      jobId:
        type: string
    type: object
  body.Env:
    properties:
      name:
        maxLength: 100
        minLength: 1
        type: string
      value:
        maxLength: 10000
        minLength: 1
        type: string
    required:
    - name
    - value
    type: object
  body.GitHub:
    properties:
      repositoryId:
        type: integer
      token:
        maxLength: 1000
        minLength: 1
        type: string
    required:
    - repositoryId
    - token
    type: object
  body.GitHubRepositoriesRead:
    properties:
      accessToken:
        type: string
      repositories:
        items:
          $ref: '#/definitions/body.GitHubRepository'
        type: array
    type: object
  body.GitHubRepository:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  body.GpuLease:
    properties:
      end:
        type: string
      expired:
        type: boolean
      user:
        type: string
      vmId:
        type: string
    type: object
  body.GpuRead:
    properties:
      id:
        type: string
      lease:
        $ref: '#/definitions/body.GpuLease'
      name:
        type: string
    type: object
  body.JobRead:
    properties:
      id:
        type: string
      lastError:
        type: string
      status:
        type: string
      type:
        type: string
      userId:
        type: string
    type: object
  body.JobUpdate:
    properties:
      status:
        enum:
        - pending
        - running
        - failed
        - terminated
        - finished
        type: string
    type: object
  body.NotificationRead:
    properties:
      content:
        additionalProperties: true
        type: object
      id:
        type: string
      readAt:
        type: string
      type:
        type: string
    type: object
  body.NotificationUpdate:
    properties:
      readAt:
        type: string
    type: object
  body.Port:
    properties:
      externalPort:
        type: integer
      httpProxy:
        $ref: '#/definitions/body.VmHttpProxy'
      name:
        maxLength: 100
        minLength: 1
        type: string
      port:
        maximum: 65535
        minimum: 1
        type: integer
      protocol:
        enum:
        - tcp
        - udp
        type: string
    required:
    - name
    - port
    - protocol
    type: object
  body.PublicKey:
    properties:
      key:
        type: string
      name:
        maxLength: 30
        minLength: 1
        type: string
    required:
    - key
    - name
    type: object
  body.Quota:
    properties:
      cpuCores:
        type: integer
      deployments:
        type: integer
      diskSize:
        type: integer
      ram:
        type: integer
      snapshots:
        type: integer
    type: object
  body.Role:
    properties:
      description:
        type: string
      name:
        type: string
      permissions:
        items:
          type: string
        type: array
    type: object
  body.Specs:
    properties:
      cpuCores:
        type: integer
      diskSize:
        type: integer
      ram:
        type: integer
    type: object
  body.StorageManagerDeleted:
    properties:
      id:
        type: string
      jobId:
        type: string
    type: object
  body.StorageManagerRead:
    properties:
      createdAt:
        type: string
      id:
        type: string
      ownerId:
        type: string
      url:
        type: string
      zone:
        type: string
    type: object
  body.TeamCreate:
    properties:
      description:
        maxLength: 1000
        type: string
      members:
        items:
          $ref: '#/definitions/body.TeamMemberCreate'
        maxItems: 10
        minItems: 0
        type: array
      name:
        maxLength: 100
        minLength: 1
        type: string
      resources:
        items:
          type: string
        maxItems: 10
        minItems: 0
        type: array
    required:
    - name
    type: object
  body.TeamMember:
    properties:
      email:
        type: string
      id:
        type: string
      joinedAt:
        type: string
      teamRole:
        type: string
      username:
        type: string
    type: object
  body.TeamMemberCreate:
    properties:
      id:
        type: string
      teamRole:
        description: default to MemberRoleAdmin right now
        type: string
    required:
    - id
    type: object
  body.TeamMemberUpdate:
    properties:
      id:
        type: string
      teamRole:
        description: default to MemberRoleAdmin right now
        type: string
    required:
    - id
    type: object
  body.TeamRead:
    properties:
      description:
        type: string
      id:
        type: string
      members:
        items:
          $ref: '#/definitions/body.TeamMember'
        type: array
      name:
        type: string
      ownerId:
        type: string
      resources:
        items:
          $ref: '#/definitions/body.TeamResource'
        type: array
    type: object
  body.TeamResource:
    properties:
      id:
        type: string
      name:
        type: string
      type:
        type: string
    type: object
  body.TeamUpdate:
    properties:
      description:
        maxLength: 1000
        type: string
      members:
        items:
          $ref: '#/definitions/body.TeamMemberUpdate'
        maxItems: 10
        minItems: 0
        type: array
      name:
        maxLength: 100
        minLength: 1
        type: string
      resources:
        items:
          type: string
        maxItems: 10
        minItems: 0
        type: array
    type: object
  body.UserRead:
    properties:
      admin:
        type: boolean
      email:
        type: string
      id:
        type: string
      onboarded:
        type: boolean
      publicKeys:
        items:
          $ref: '#/definitions/body.PublicKey'
        type: array
      quota:
        $ref: '#/definitions/body.Quota'
      role:
        $ref: '#/definitions/body.Role'
      storageUrl:
        type: string
      usage:
        $ref: '#/definitions/body.Quota'
      username:
        type: string
    type: object
  body.UserUpdate:
    properties:
      onboarded:
        type: boolean
      publicKeys:
        items:
          $ref: '#/definitions/body.PublicKey'
        maxItems: 1000
        minItems: 0
        type: array
      username:
        maxLength: 32
        minLength: 3
        type: string
    type: object
  body.VmCommand:
    properties:
      command:
        enum:
        - start
        - stop
        - reboot
        type: string
    required:
    - command
    type: object
  body.VmCreate:
    properties:
      cpuCores:
        minimum: 2
        type: integer
      diskSize:
        minimum: 20
        type: integer
      name:
        maxLength: 30
        minLength: 3
        type: string
      ports:
        items:
          $ref: '#/definitions/body.Port'
        maxItems: 100
        minItems: 0
        type: array
      ram:
        minimum: 1
        type: integer
      sshPublicKey:
        type: string
      zone:
        type: string
    required:
    - cpuCores
    - diskSize
    - name
    - ram
    - sshPublicKey
    type: object
  body.VmCreated:
    properties:
      id:
        type: string
      jobId:
        type: string
    type: object
  body.VmDeleted:
    properties:
      id:
        type: string
      jobId:
        type: string
    type: object
  body.VmGpu:
    properties:
      expired:
        type: boolean
      id:
        type: string
      leaseEnd:
        type: string
      name:
        type: string
    type: object
  body.VmHttpProxy:
    properties:
      customDomain:
        maxLength: 253
        minLength: 1
        type: string
      customDomainUrl:
        type: string
      name:
        maxLength: 30
        minLength: 3
        type: string
      url:
        type: string
    required:
    - name
    type: object
  body.VmRead:
    properties:
      connectionString:
        type: string
      gpu:
        $ref: '#/definitions/body.VmGpu'
      id:
        type: string
      name:
        type: string
      ownerId:
        type: string
      ports:
        items:
          $ref: '#/definitions/body.Port'
        type: array
      specs:
        $ref: '#/definitions/body.Specs'
      sshPublicKey:
        type: string
      status:
        type: string
      zone:
        type: string
    type: object
  body.VmSnapshotRead:
    properties:
      created:
        type: string
      current:
        type: boolean
      displayname:
        type: string
      id:
        type: string
      parentName:
        type: string
      state:
        type: string
      vmId:
        type: string
    type: object
  body.VmUpdate:
    properties:
      cpuCores:
        minimum: 1
        type: integer
      gpuId:
        maxLength: 100
        minLength: 0
        type: string
      ports:
        items:
          $ref: '#/definitions/body.Port'
        maxItems: 1000
        minItems: 0
        type: array
      ram:
        minimum: 1
        type: integer
      snapshotId:
        type: string
    type: object
  body.VmUpdated:
    properties:
      id:
        type: string
      jobId:
        type: string
    type: object
  body.Volume:
    properties:
      appPath:
        maxLength: 100
        minLength: 1
        type: string
      name:
        maxLength: 100
        minLength: 1
        type: string
      serverPath:
        maxLength: 100
        minLength: 1
        type: string
    required:
    - appPath
    - name
    - serverPath
    type: object
  body.ZoneRead:
    properties:
      description:
        type: string
      interface:
        type: string
      name:
        type: string
      type:
        type: string
    type: object
  role.Permissions:
    properties:
      chooseGPU:
        type: boolean
      chooseZone:
        type: boolean
      gpuLeaseDuration:
        description: in hours
        type: number
      useCustomDomains:
        type: boolean
      useGPUs:
        type: boolean
      usePrivilegedGPUs:
        type: boolean
    type: object
  role.Quotas:
    properties:
      cpuCores:
        type: integer
      deployments:
        type: integer
      diskSize:
        type: integer
      ram:
        type: integer
      snapshots:
        type: integer
    type: object
  role.Role:
    properties:
      description:
        type: string
      iamGroup:
        type: string
      name:
        type: string
      permissions:
        $ref: '#/definitions/role.Permissions'
      quotas:
        $ref: '#/definitions/role.Quotas'
    type: object
  service.AuthInfo:
    properties:
      isAdmin:
        type: boolean
      jwtToken:
        $ref: '#/definitions/auth.KeycloakToken'
      roles:
        items:
          $ref: '#/definitions/role.Role'
        type: array
      userId:
        type: string
    type: object
  sys.ErrorResponse:
    properties:
      errors:
        items:
          $ref: '#/definitions/sys.errorPiece'
        type: array
    type: object
  sys.errorPiece:
    properties:
      code:
        type: string
      msg:
        type: string
    type: object
info:
  contact: {}
paths:
  /deployments:
    get:
      consumes:
      - application/json
      description: Get list of deployments
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Get all
        in: query
        name: all
        type: boolean
      - description: Filter by user id
        in: query
        name: userId
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/body.DeploymentRead'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Get list of deployments
      tags:
      - Deployment
    post:
      consumes:
      - application/json
      description: Create deployment
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Deployment body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/body.DeploymentCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/body.DeploymentRead'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Create deployment
      tags:
      - Deployment
  /deployments/{deployment_id}:
    get:
      consumes:
      - application/json
      description: Get deployment by id
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Deployment ID
        in: path
        name: deploymentId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/body.DeploymentRead'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Get deployment by id
      tags:
      - Deployment
  /deployments/{deploymentId}:
    delete:
      consumes:
      - application/json
      description: Delete deployment
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Deployment ID
        in: path
        name: deploymentId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/body.DeploymentCreated'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Delete deployment
      tags:
      - Deployment
    put:
      consumes:
      - application/json
      description: Update deployment
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Deployment ID
        in: path
        name: deploymentId
        required: true
        type: string
      - description: Deployment update
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/body.DeploymentUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/body.DeploymentUpdated'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Update deployment
      tags:
      - Deployment
  /deployments/{deploymentId}/ciConfig:
    get:
      consumes:
      - application/json
      description: Get CI config
      parameters:
      - description: Deployment ID
        in: path
        name: deploymentId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/body.CiConfig'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Get CI config
      tags:
      - Deployment
  /deployments/{deploymentId}/command:
    post:
      consumes:
      - application/json
      description: Do command
      parameters:
      - description: Deployment ID
        in: path
        name: deploymentId
        required: true
        type: string
      - description: Command body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/body.DeploymentCommand'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: empty
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "423":
          description: Locked
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Do command
      tags:
      - Deployment
  /github/repositories:
    get:
      consumes:
      - application/json
      parameters:
      - description: code
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/body.GitHubRepositoriesRead'
      summary: Get GitHub repositories
      tags:
      - GitHub
  /job:
    get:
      consumes:
      - application/json
      description: Get list of jobs
      parameters:
      - description: Get all
        in: query
        name: all
        type: boolean
      - description: Filter by user id
        in: query
        name: userId
        type: string
      - description: Filter by type
        in: query
        name: type
        type: string
      - description: Filter by status
        in: query
        name: status
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/body.JobRead'
            type: array
      summary: Get list of jobs
      tags:
      - Job
  /job/{id}:
    get:
      consumes:
      - application/json
      description: Get job by id
      parameters:
      - description: Job ID
        in: path
        name: jobId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/body.JobRead'
      summary: Get job by id
      tags:
      - Job
    post:
      consumes:
      - application/json
      description: Update job
      parameters:
      - description: Job ID
        in: path
        name: jobId
        required: true
        type: string
      - description: Job update
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/body.JobUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/body.JobRead'
      summary: Update job
      tags:
      - Job
  /notifications:
    get:
      consumes:
      - application/json
      description: Get notifications
      parameters:
      - description: Get all notifications
        in: query
        name: all
        type: boolean
      - description: Get notifications by user id
        in: query
        name: userId
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/body.NotificationRead'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Get notifications
      tags:
      - Notification
  /notifications/{notificationId}:
    delete:
      consumes:
      - application/json
      description: Delete notification
      parameters:
      - description: Notification ID
        in: path
        name: notificationId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Delete notification
      tags:
      - Notification
    get:
      consumes:
      - application/json
      description: Get notification
      parameters:
      - description: Notification ID
        in: path
        name: notificationId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/body.NotificationRead'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Get notification
      tags:
      - Notification
    post:
      consumes:
      - application/json
      description: Update notification
      parameters:
      - description: Notification ID
        in: path
        name: notificationId
        required: true
        type: string
      - description: Notification update
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/body.NotificationUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Update notification
      tags:
      - Notification
  /storageManager/{storageManagerId}:
    get:
      consumes:
      - application/json
      description: Delete storage manager
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Storage manager ID
        in: path
        name: storageManagerId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/body.StorageManagerDeleted'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Delete storage manager
      tags:
      - Deployment
  /storageManagers:
    get:
      consumes:
      - application/json
      description: Get storage manager list
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/body.StorageManagerRead'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Get storage manager list
      tags:
      - Deployment
  /storageManagers/{storageManagerId}:
    get:
      consumes:
      - application/json
      description: Get storage manager
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Storage manager ID
        in: path
        name: storageManagerId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/body.StorageManagerDeleted'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Get storage manager
      tags:
      - Deployment
  /teams:
    get:
      consumes:
      - application/json
      description: Get team list
      parameters:
      - description: All teams
        in: query
        name: all
        type: boolean
      - description: User ID
        in: query
        name: userId
        type: string
      - description: Page
        in: query
        name: page
        type: integer
      - description: Page Size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/body.TeamRead'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/body.BindingError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Get team list
      tags:
      - Team
    post:
      consumes:
      - application/json
      description: Create team
      parameters:
      - description: Team
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/body.TeamCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/body.TeamRead'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/body.BindingError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Create team
      tags:
      - Team
  /teams/{teamId}:
    delete:
      consumes:
      - application/json
      description: Delete team
      parameters:
      - description: Team ID
        in: path
        name: teamId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/body.BindingError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Delete team
      tags:
      - Team
    get:
      consumes:
      - application/json
      description: Get team
      parameters:
      - description: Team ID
        in: path
        name: teamId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/body.TeamRead'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/body.BindingError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Get team
      tags:
      - Team
    put:
      consumes:
      - application/json
      description: Update team
      parameters:
      - description: Team ID
        in: path
        name: teamId
        required: true
        type: string
      - description: Team
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/body.TeamUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/body.TeamRead'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/body.BindingError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Update team
      tags:
      - Team
  /user/auth-check:
    get:
      consumes:
      - application/json
      description: Check auth
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.AuthInfo'
      summary: Check auth
      tags:
      - User
  /users:
    get:
      consumes:
      - application/json
      description: Get user list
      parameters:
      - description: Want all users
        in: query
        name: wantAll
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/body.UserRead'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Get user list
      tags:
      - User
  /users/{userId}:
    get:
      consumes:
      - application/json
      description: Get user by id
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/body.UserRead'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Get user by id
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Update user by id
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      - description: User update
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/body.UserUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/body.UserRead'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Update user by id
      tags:
      - User
  /vm:
    get:
      consumes:
      - application/json
      description: Get list of VMs
      parameters:
      - description: Get all
        in: query
        name: all
        type: boolean
      - description: Filter by user id
        in: query
        name: userId
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/body.VmRead'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Get list of VMs
      tags:
      - VM
    post:
      consumes:
      - application/json
      description: Create VM
      parameters:
      - description: VM body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/body.VmCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/body.VmCreated'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "423":
          description: Locked
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Create VM
      tags:
      - VM
  /vm/{vmId}:
    delete:
      consumes:
      - application/json
      description: Delete VM
      parameters:
      - description: VM ID
        in: path
        name: vmId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/body.VmDeleted'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "423":
          description: Locked
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Delete VM
      tags:
      - VM
    get:
      consumes:
      - application/json
      description: Get VM by id
      parameters:
      - description: VM ID
        in: path
        name: vmId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/body.VmRead'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Get VM by id
      tags:
      - VM
    put:
      consumes:
      - application/json
      description: Update VM
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: VM ID
        in: path
        name: vmId
        required: true
        type: string
      - description: VM update
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/body.VmUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/body.VmUpdated'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "423":
          description: Locked
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Update VM
      tags:
      - VM
  /vms/{vmId}/command:
    post:
      consumes:
      - application/json
      description: Do command
      parameters:
      - description: VM ID
        in: path
        name: vmId
        required: true
        type: string
      - description: Command body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/body.VmCommand'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: empty
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "423":
          description: Locked
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Do command
      tags:
      - VM
  /vms/{vmId}/snapshots:
    get:
      consumes:
      - application/json
      description: Get snapshot list
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: VM ID
        in: path
        name: vmId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/body.VmSnapshotRead'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "423":
          description: Locked
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Get snapshot list
      tags:
      - VM
  /vms/gpus:
    get:
      consumes:
      - application/json
      description: Get list of GPUs
      parameters:
      - description: Only show available GPUs
        in: query
        name: available
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/body.GpuRead'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "423":
          description: Locked
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Get list of GPUs
      tags:
      - VM
swagger: "2.0"
