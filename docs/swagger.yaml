definitions:
  body.BindingError:
    properties:
      validationErrors:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
    type: object
  body.CiConfig:
    properties:
      config:
        type: string
    type: object
  body.CustomDomainRead:
    properties:
      domain:
        type: string
      secret:
        type: string
      status:
        type: string
      url:
        type: string
    type: object
  body.DeploymentCommand:
    properties:
      command:
        enum:
        - restart
        type: string
    required:
    - command
    type: object
  body.DeploymentCreate:
    properties:
      args:
        items:
          type: string
        maxItems: 100
        minItems: 0
        type: array
      customDomain:
        maxLength: 253
        minLength: 1
        type: string
      envs:
        items:
          $ref: '#/definitions/body.Env'
        maxItems: 1000
        minItems: 0
        type: array
      healthCheckPath:
        maxLength: 1000
        minLength: 0
        type: string
      image:
        maxLength: 1000
        minLength: 1
        type: string
      initCommands:
        items:
          type: string
        maxItems: 100
        minItems: 0
        type: array
      name:
        maxLength: 30
        minLength: 3
        type: string
      private:
        type: boolean
      replicas:
        maximum: 100
        minimum: 0
        type: integer
      volumes:
        items:
          $ref: '#/definitions/body.Volume'
        maxItems: 100
        minItems: 0
        type: array
      zone:
        type: string
    required:
    - name
    type: object
  body.DeploymentCreated:
    properties:
      id:
        type: string
      jobId:
        type: string
    type: object
  body.DeploymentRead:
    properties:
      args:
        items:
          type: string
        type: array
      createdAt:
        type: string
      customDomain:
        type: string
      customDomainSecret:
        type: string
      customDomainStatus:
        type: string
      customDomainUrl:
        type: string
      envs:
        items:
          $ref: '#/definitions/body.Env'
        type: array
      healthCheckPath:
        type: string
      id:
        type: string
      image:
        type: string
      initCommands:
        items:
          type: string
        type: array
      integrations:
        description: |-
          Integrations are currently not used, but could be used if we wanted to add a list of integrations to the deployment

          For example GitHub
        items:
          type: string
        type: array
      internalPort:
        type: integer
      name:
        type: string
      ownerId:
        type: string
      pingResult:
        type: integer
      private:
        type: boolean
      repairedAt:
        type: string
      replicas:
        type: integer
      restartedAt:
        type: string
      status:
        type: string
      storageUrl:
        type: string
      teams:
        items:
          type: string
        type: array
      type:
        type: string
      updatedAt:
        type: string
      url:
        type: string
      volumes:
        items:
          $ref: '#/definitions/body.Volume'
        type: array
      zone:
        type: string
    type: object
  body.DeploymentUpdate:
    properties:
      args:
        items:
          type: string
        maxItems: 100
        minItems: 0
        type: array
      customDomain:
        maxLength: 253
        minLength: 0
        type: string
      envs:
        items:
          $ref: '#/definitions/body.Env'
        maxItems: 1000
        minItems: 0
        type: array
      healthCheckPath:
        maxLength: 1000
        minLength: 0
        type: string
      image:
        maxLength: 1000
        minLength: 1
        type: string
      initCommands:
        items:
          type: string
        maxItems: 100
        minItems: 0
        type: array
      name:
        description: update
        maxLength: 30
        minLength: 3
        type: string
      ownerId:
        description: update owner
        type: string
      private:
        type: boolean
      replicas:
        maximum: 100
        minimum: 0
        type: integer
      transferCode:
        maxLength: 1000
        minLength: 1
        type: string
      volumes:
        items:
          $ref: '#/definitions/body.Volume'
        maxItems: 100
        minItems: 0
        type: array
    required:
    - name
    type: object
  body.DeploymentUpdated:
    properties:
      id:
        type: string
      jobId:
        type: string
    type: object
  body.DiscoverRead:
    properties:
      roles:
        items:
          $ref: '#/definitions/body.Role'
        type: array
      version:
        type: string
    type: object
  body.Env:
    properties:
      name:
        maxLength: 100
        minLength: 1
        type: string
      value:
        maxLength: 10000
        minLength: 1
        type: string
    required:
    - name
    - value
    type: object
  body.GpuRead:
    properties:
      id:
        type: string
      lease:
        $ref: '#/definitions/body.Lease'
      name:
        type: string
      zone:
        type: string
    type: object
  body.HarborWebhook:
    properties:
      event_data:
        properties:
          repository:
            properties:
              date_created:
                type: integer
              name:
                type: string
              namespace:
                type: string
              repo_full_name:
                type: string
              repo_type:
                type: string
            type: object
          resources:
            items:
              properties:
                digest:
                  type: string
                resource_url:
                  type: string
                tag:
                  type: string
              type: object
            type: array
        type: object
      occur_at:
        type: integer
      operator:
        type: string
      type:
        type: string
    type: object
  body.JobRead:
    properties:
      createdAt:
        type: string
      finishedAt:
        type: string
      id:
        type: string
      lastError:
        type: string
      lastRunAt:
        type: string
      runAfter:
        type: string
      status:
        type: string
      type:
        type: string
      userId:
        type: string
    type: object
  body.JobUpdate:
    properties:
      status:
        enum:
        - pending
        - running
        - failed
        - terminated
        - finished
        - completed
        type: string
    type: object
  body.Lease:
    properties:
      end:
        type: string
      expired:
        type: boolean
      user:
        type: string
      vmId:
        type: string
    type: object
  body.NotificationRead:
    properties:
      completedAt:
        type: string
      content:
        additionalProperties: true
        type: object
      createdAt:
        type: string
      id:
        type: string
      readAt:
        type: string
      type:
        type: string
      userId:
        type: string
    type: object
  body.NotificationUpdate:
    properties:
      read:
        type: boolean
    type: object
  body.PublicKey:
    properties:
      key:
        type: string
      name:
        maxLength: 30
        minLength: 1
        type: string
    required:
    - key
    - name
    type: object
  body.Quota:
    properties:
      cpuCores:
        type: integer
      deployments:
        type: integer
      diskSize:
        type: integer
      gpuLeaseDuration:
        description: in hours
        type: number
      ram:
        type: integer
      snapshots:
        type: integer
    type: object
  body.Role:
    properties:
      description:
        type: string
      name:
        type: string
      permissions:
        items:
          type: string
        type: array
      quota:
        $ref: '#/definitions/body.Quota'
    type: object
  body.SmDeleted:
    properties:
      id:
        type: string
      jobId:
        type: string
    type: object
  body.SmRead:
    properties:
      createdAt:
        type: string
      id:
        type: string
      ownerId:
        type: string
      url:
        type: string
      zone:
        type: string
    type: object
  body.TeamCreate:
    properties:
      description:
        maxLength: 1000
        type: string
      members:
        items:
          $ref: '#/definitions/body.TeamMemberCreate'
        maxItems: 10
        minItems: 0
        type: array
      name:
        maxLength: 100
        minLength: 1
        type: string
      resources:
        items:
          type: string
        maxItems: 10
        minItems: 0
        type: array
    required:
    - name
    type: object
  body.TeamMember:
    properties:
      addedAt:
        type: string
      email:
        type: string
      id:
        type: string
      joinedAt:
        type: string
      memberStatus:
        type: string
      teamRole:
        type: string
      username:
        type: string
    type: object
  body.TeamMemberCreate:
    properties:
      id:
        type: string
      teamRole:
        description: default to MemberRoleAdmin right now
        type: string
    required:
    - id
    type: object
  body.TeamMemberUpdate:
    properties:
      id:
        type: string
      teamRole:
        description: default to MemberRoleAdmin right now
        type: string
    required:
    - id
    type: object
  body.TeamRead:
    properties:
      createdAt:
        type: string
      description:
        type: string
      id:
        type: string
      members:
        items:
          $ref: '#/definitions/body.TeamMember'
        type: array
      name:
        type: string
      ownerId:
        type: string
      resources:
        items:
          $ref: '#/definitions/body.TeamResource'
        type: array
      updatedAt:
        type: string
    type: object
  body.TeamResource:
    properties:
      id:
        type: string
      name:
        type: string
      type:
        type: string
    type: object
  body.TeamUpdate:
    properties:
      description:
        maxLength: 1000
        type: string
      members:
        items:
          $ref: '#/definitions/body.TeamMemberUpdate'
        maxItems: 10
        minItems: 0
        type: array
      name:
        maxLength: 100
        minLength: 1
        type: string
      resources:
        items:
          type: string
        maxItems: 10
        minItems: 0
        type: array
    type: object
  body.Usage:
    properties:
      cpuCores:
        type: integer
      deployments:
        type: integer
      diskSize:
        type: integer
      ram:
        type: integer
      snapshots:
        type: integer
    type: object
  body.UserDataCreate:
    properties:
      data:
        maxLength: 1000
        minLength: 1
        type: string
      id:
        maxLength: 100
        minLength: 1
        type: string
    required:
    - data
    - id
    type: object
  body.UserDataRead:
    properties:
      data:
        type: string
      id:
        type: string
      userId:
        type: string
    type: object
  body.UserDataUpdate:
    properties:
      data:
        maxLength: 1000
        minLength: 1
        type: string
    required:
    - data
    type: object
  body.UserRead:
    properties:
      admin:
        type: boolean
      email:
        type: string
      firstName:
        type: string
      id:
        type: string
      lastName:
        type: string
      onboarded:
        type: boolean
      publicKeys:
        items:
          $ref: '#/definitions/body.PublicKey'
        type: array
      quota:
        $ref: '#/definitions/body.Quota'
      role:
        $ref: '#/definitions/body.Role'
      storageUrl:
        type: string
      usage:
        $ref: '#/definitions/body.Usage'
      username:
        type: string
    type: object
  body.UserUpdate:
    properties:
      onboarded:
        type: boolean
      publicKeys:
        items:
          $ref: '#/definitions/body.PublicKey'
        maxItems: 1000
        minItems: 0
        type: array
    type: object
  body.VmAction:
    properties:
      action:
        enum:
        - start
        - stop
        - restart
        - repair
        type: string
    required:
    - action
    type: object
  body.VmCommand:
    properties:
      command:
        enum:
        - start
        - stop
        - reboot
        type: string
    required:
    - command
    type: object
  body.Volume:
    properties:
      appPath:
        maxLength: 255
        minLength: 1
        type: string
      name:
        maxLength: 30
        minLength: 3
        type: string
      serverPath:
        maxLength: 255
        minLength: 1
        type: string
    required:
    - appPath
    - name
    - serverPath
    type: object
  body.ZoneRead:
    properties:
      description:
        type: string
      interface:
        type: string
      name:
        type: string
      type:
        type: string
    type: object
  go-deploy_dto_v1_body.HttpProxyCreate:
    properties:
      customDomain:
        maxLength: 100
        minLength: 1
        type: string
      name:
        maxLength: 30
        minLength: 3
        type: string
    required:
    - name
    type: object
  go-deploy_dto_v1_body.HttpProxyRead:
    properties:
      customDomain:
        type: string
      customDomainSecret:
        type: string
      customDomainStatus:
        type: string
      customDomainUrl:
        type: string
      name:
        maxLength: 30
        minLength: 3
        type: string
      url:
        type: string
    required:
    - name
    type: object
  go-deploy_dto_v1_body.HttpProxyUpdate:
    properties:
      customDomain:
        maxLength: 100
        type: string
      name:
        maxLength: 30
        minLength: 3
        type: string
    required:
    - name
    type: object
  go-deploy_dto_v1_body.PortCreate:
    properties:
      httpProxy:
        $ref: '#/definitions/go-deploy_dto_v1_body.HttpProxyCreate'
      name:
        maxLength: 100
        minLength: 1
        type: string
      port:
        maximum: 65535
        minimum: 1
        type: integer
      protocol:
        enum:
        - tcp
        - udp
        type: string
    required:
    - name
    - port
    - protocol
    type: object
  go-deploy_dto_v1_body.PortRead:
    properties:
      externalPort:
        type: integer
      httpProxy:
        $ref: '#/definitions/go-deploy_dto_v1_body.HttpProxyRead'
      name:
        type: string
      port:
        type: integer
      protocol:
        type: string
    type: object
  go-deploy_dto_v1_body.PortUpdate:
    properties:
      httpProxy:
        $ref: '#/definitions/go-deploy_dto_v1_body.HttpProxyUpdate'
      name:
        maxLength: 100
        minLength: 1
        type: string
      port:
        maximum: 65535
        minimum: 1
        type: integer
      protocol:
        enum:
        - tcp
        - udp
        type: string
    required:
    - name
    - port
    - protocol
    type: object
  go-deploy_dto_v1_body.Specs:
    properties:
      cpuCores:
        type: integer
      diskSize:
        type: integer
      ram:
        type: integer
    type: object
  go-deploy_dto_v1_body.VmCreate:
    properties:
      cpuCores:
        minimum: 2
        type: integer
      diskSize:
        minimum: 20
        type: integer
      name:
        maxLength: 30
        minLength: 3
        type: string
      ports:
        items:
          $ref: '#/definitions/go-deploy_dto_v1_body.PortCreate'
        maxItems: 10
        minItems: 0
        type: array
      ram:
        minimum: 1
        type: integer
      sshPublicKey:
        type: string
      zone:
        type: string
    required:
    - cpuCores
    - diskSize
    - name
    - ram
    - sshPublicKey
    type: object
  go-deploy_dto_v1_body.VmCreated:
    properties:
      id:
        type: string
      jobId:
        type: string
    type: object
  go-deploy_dto_v1_body.VmDeleted:
    properties:
      id:
        type: string
      jobId:
        type: string
    type: object
  go-deploy_dto_v1_body.VmGpuLease:
    properties:
      expired:
        type: boolean
      id:
        type: string
      leaseEnd:
        type: string
      name:
        type: string
    type: object
  go-deploy_dto_v1_body.VmRead:
    properties:
      connectionString:
        type: string
      createdAt:
        type: string
      gpu_repo:
        $ref: '#/definitions/go-deploy_dto_v1_body.VmGpuLease'
      host:
        type: string
      id:
        type: string
      name:
        type: string
      ownerId:
        type: string
      ports:
        items:
          $ref: '#/definitions/go-deploy_dto_v1_body.PortRead'
        type: array
      repairedAt:
        type: string
      specs:
        $ref: '#/definitions/go-deploy_dto_v1_body.Specs'
      sshPublicKey:
        type: string
      status:
        type: string
      teams:
        items:
          type: string
        type: array
      updatedAt:
        type: string
      zone:
        type: string
    type: object
  go-deploy_dto_v1_body.VmSnapshotRead:
    properties:
      created:
        type: string
      current:
        type: boolean
      displayName:
        type: string
      id:
        type: string
      parentName:
        type: string
      state:
        type: string
      vmId:
        type: string
    type: object
  go-deploy_dto_v1_body.VmUpdate:
    properties:
      cpuCores:
        minimum: 1
        type: integer
      gpuId:
        maxLength: 100
        minLength: 0
        type: string
      name:
        maxLength: 30
        minLength: 3
        type: string
      noLeaseEnd:
        type: boolean
      ownerId:
        type: string
      ports:
        items:
          $ref: '#/definitions/go-deploy_dto_v1_body.PortUpdate'
        maxItems: 10
        minItems: 0
        type: array
      ram:
        minimum: 1
        type: integer
      snapshotId:
        type: string
      transferCode:
        maxLength: 1000
        minLength: 1
        type: string
    type: object
  go-deploy_dto_v1_body.VmUpdated:
    properties:
      id:
        type: string
      jobId:
        type: string
    type: object
  go-deploy_dto_v2_body.HttpProxyCreate:
    properties:
      customDomain:
        maxLength: 100
        minLength: 1
        type: string
      name:
        maxLength: 30
        minLength: 3
        type: string
    required:
    - name
    type: object
  go-deploy_dto_v2_body.HttpProxyRead:
    properties:
      customDomain:
        $ref: '#/definitions/body.CustomDomainRead'
      name:
        maxLength: 30
        minLength: 3
        type: string
      url:
        type: string
    required:
    - name
    type: object
  go-deploy_dto_v2_body.HttpProxyUpdate:
    properties:
      customDomain:
        maxLength: 100
        type: string
      name:
        maxLength: 30
        minLength: 3
        type: string
    required:
    - name
    type: object
  go-deploy_dto_v2_body.PortCreate:
    properties:
      httpProxy:
        $ref: '#/definitions/go-deploy_dto_v2_body.HttpProxyCreate'
      name:
        maxLength: 100
        minLength: 1
        type: string
      port:
        maximum: 65535
        minimum: 1
        type: integer
      protocol:
        enum:
        - tcp
        - udp
        type: string
    required:
    - name
    - port
    - protocol
    type: object
  go-deploy_dto_v2_body.PortRead:
    properties:
      externalPort:
        type: integer
      httpProxy:
        $ref: '#/definitions/go-deploy_dto_v2_body.HttpProxyRead'
      name:
        type: string
      port:
        type: integer
      protocol:
        type: string
    type: object
  go-deploy_dto_v2_body.PortUpdate:
    properties:
      httpProxy:
        $ref: '#/definitions/go-deploy_dto_v2_body.HttpProxyUpdate'
      name:
        maxLength: 100
        minLength: 1
        type: string
      port:
        maximum: 65535
        minimum: 1
        type: integer
      protocol:
        enum:
        - tcp
        - udp
        type: string
    required:
    - name
    - port
    - protocol
    type: object
  go-deploy_dto_v2_body.Specs:
    properties:
      cpuCores:
        type: integer
      diskSize:
        type: integer
      ram:
        type: integer
    type: object
  go-deploy_dto_v2_body.VmCreate:
    properties:
      cpuCores:
        minimum: 2
        type: integer
      diskSize:
        minimum: 20
        type: integer
      name:
        maxLength: 30
        minLength: 3
        type: string
      ports:
        items:
          $ref: '#/definitions/go-deploy_dto_v2_body.PortCreate'
        maxItems: 10
        minItems: 0
        type: array
      ram:
        minimum: 1
        type: integer
      sshPublicKey:
        type: string
      zone:
        type: string
    required:
    - cpuCores
    - diskSize
    - name
    - ram
    - sshPublicKey
    type: object
  go-deploy_dto_v2_body.VmCreated:
    properties:
      id:
        type: string
      jobId:
        type: string
    type: object
  go-deploy_dto_v2_body.VmDeleted:
    properties:
      id:
        type: string
      jobId:
        type: string
    type: object
  go-deploy_dto_v2_body.VmGpuLease:
    properties:
      id:
        type: string
      isExpired:
        type: boolean
      leaseEndAt:
        type: string
      name:
        type: string
    type: object
  go-deploy_dto_v2_body.VmRead:
    properties:
      createdAt:
        type: string
      gpu_repo:
        $ref: '#/definitions/go-deploy_dto_v2_body.VmGpuLease'
      host:
        type: string
      id:
        type: string
      name:
        type: string
      ownerId:
        type: string
      ports:
        items:
          $ref: '#/definitions/go-deploy_dto_v2_body.PortRead'
        type: array
      repairedAt:
        type: string
      specs:
        $ref: '#/definitions/go-deploy_dto_v2_body.Specs'
      sshConnectionString:
        type: string
      sshPublicKey:
        type: string
      status:
        type: string
      teams:
        items:
          type: string
        type: array
      updatedAt:
        type: string
      zone:
        type: string
    type: object
  go-deploy_dto_v2_body.VmSnapshotRead:
    properties:
      created:
        type: string
      id:
        type: string
      name:
        type: string
      status:
        type: string
    type: object
  go-deploy_dto_v2_body.VmUpdate:
    properties:
      cpuCores:
        minimum: 1
        type: integer
      gpuId:
        description: |-
          GpuID is used to attach/detach a GPU to a VM.
          If specified and not empty, only the GPU will be attached.
          If specified and empty, only the GPU will be detached.
        maxLength: 100
        minLength: 0
        type: string
      name:
        description: |-
          Name is used to rename a VM.
          If specified, only name will be updated.
        maxLength: 30
        minLength: 3
        type: string
      ownerId:
        description: |-
          OwnerID is used to initiate transfer a VM to another user.
          If specified, only the transfer will happen.
          If specified but empty, the transfer will be canceled.
        type: string
      ports:
        items:
          $ref: '#/definitions/go-deploy_dto_v2_body.PortUpdate'
        maxItems: 10
        minItems: 0
        type: array
      ram:
        minimum: 1
        type: integer
      snapshotId:
        description: |-
          SnapshotID is used to apply snapshot to a VM.
          If specified, only the snapshot application will happen.
        type: string
      transferCode:
        description: |-
          TransferCode is used to accept transfer of a VM.
          If specified, only the transfer will happen.
        maxLength: 1000
        minLength: 1
        type: string
    type: object
  go-deploy_dto_v2_body.VmUpdated:
    properties:
      id:
        type: string
      jobId:
        type: string
    type: object
  sys.ErrorResponse:
    properties:
      errors:
        items:
          $ref: '#/definitions/sys.errorPiece'
        type: array
    type: object
  sys.errorPiece:
    properties:
      code:
        type: string
      msg:
        type: string
    type: object
info:
  contact: {}
paths:
  /deployments:
    get:
      consumes:
      - application/json
      description: Get list of deployments
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Get all
        in: query
        name: all
        type: boolean
      - description: Filter by user id
        in: query
        name: userId
        type: string
      - description: Include shared
        in: query
        name: shared
        type: boolean
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/body.DeploymentRead'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Get list of deployments
      tags:
      - Deployment
    post:
      consumes:
      - application/json
      description: Create deployment
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Deployment body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/body.DeploymentCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/body.DeploymentRead'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Create deployment
      tags:
      - Deployment
  /deployments/{deployment_id}:
    get:
      consumes:
      - application/json
      description: Get deployment by id
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Deployment ID
        in: path
        name: deploymentId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/body.DeploymentRead'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Get deployment by id
      tags:
      - Deployment
  /deployments/{deploymentId}:
    delete:
      consumes:
      - application/json
      description: Delete deployment
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Deployment ID
        in: path
        name: deploymentId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/body.DeploymentCreated'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Delete deployment
      tags:
      - Deployment
    post:
      consumes:
      - application/json
      description: Update deployment
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Deployment ID
        in: path
        name: deploymentId
        required: true
        type: string
      - description: Deployment update
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/body.DeploymentUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/body.DeploymentUpdated'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Update deployment
      tags:
      - Deployment
  /deployments/{deploymentId}/ciConfig:
    get:
      consumes:
      - application/json
      description: Get CI config
      parameters:
      - description: Deployment ID
        in: path
        name: deploymentId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/body.CiConfig'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Get CI config
      tags:
      - Deployment
  /deployments/{deploymentId}/command:
    post:
      consumes:
      - application/json
      description: Do command
      parameters:
      - description: Deployment ID
        in: path
        name: deploymentId
        required: true
        type: string
      - description: Command body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/body.DeploymentCommand'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: empty
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "423":
          description: Locked
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Do command
      tags:
      - Deployment
  /deployments/{deploymentId}/logs:
    get:
      consumes:
      - application/json
      description: Get logs using Server-Sent Events
      parameters:
      - description: Deployment ID
        in: path
        name: deploymentId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Get logs SSE
      tags:
      - Deployment
  /discover:
    get:
      consumes:
      - application/json
      description: Discover
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/body.DiscoverRead'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Discover
      tags:
      - Discover
  /hooks/harbor:
    post:
      consumes:
      - application/json
      description: Handle Harbor hook
      parameters:
      - description: Basic auth token
        in: header
        name: Authorization
        type: string
      - description: Harbor webhook body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/body.HarborWebhook'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: empty
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Handle Harbor hook
      tags:
      - Deployment
  /job:
    get:
      consumes:
      - application/json
      description: Get list of jobs
      parameters:
      - description: Get all
        in: query
        name: all
        type: boolean
      - description: Filter by user id
        in: query
        name: userId
        type: string
      - description: Filter by type
        in: query
        name: type
        type: string
      - description: Filter by status
        in: query
        name: status
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/body.JobRead'
            type: array
      summary: Get list of jobs
      tags:
      - Job
  /job/{id}:
    get:
      consumes:
      - application/json
      description: Get job by id
      parameters:
      - description: Job ID
        in: path
        name: jobId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/body.JobRead'
      summary: Get job by id
      tags:
      - Job
    post:
      consumes:
      - application/json
      description: Update job
      parameters:
      - description: Job ID
        in: path
        name: jobId
        required: true
        type: string
      - description: Job update
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/body.JobUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/body.JobRead'
      summary: Update job
      tags:
      - Job
  /metrics:
    get:
      consumes:
      - application/json
      description: Get metrics
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Get metrics
      tags:
      - Metrics
  /notifications:
    get:
      consumes:
      - application/json
      description: Get notifications
      parameters:
      - description: Get all notifications
        in: query
        name: all
        type: boolean
      - description: Get notifications by user id
        in: query
        name: userId
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/body.NotificationRead'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Get notifications
      tags:
      - Notification
  /notifications/{notificationId}:
    delete:
      consumes:
      - application/json
      description: Delete notification
      parameters:
      - description: Notification ID
        in: path
        name: notificationId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Delete notification
      tags:
      - Notification
    get:
      consumes:
      - application/json
      description: Get notification
      parameters:
      - description: Notification ID
        in: path
        name: notificationId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/body.NotificationRead'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Get notification
      tags:
      - Notification
    post:
      consumes:
      - application/json
      description: Update notification
      parameters:
      - description: Notification ID
        in: path
        name: notificationId
        required: true
        type: string
      - description: Notification update
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/body.NotificationUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Update notification
      tags:
      - Notification
  /storageManager/{storageManagerId}:
    get:
      consumes:
      - application/json
      description: Delete storage manager
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Storage manager ID
        in: path
        name: storageManagerId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/body.SmDeleted'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Delete storage manager
      tags:
      - StorageManager
  /storageManagers:
    get:
      consumes:
      - application/json
      description: Get storage manager list
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/body.SmRead'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Get storage manager list
      tags:
      - StorageManager
  /storageManagers/{storageManagerId}:
    get:
      consumes:
      - application/json
      description: Get storage manager
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Storage manager ID
        in: path
        name: storageManagerId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/body.SmDeleted'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Get storage manager
      tags:
      - StorageManager
  /teams:
    get:
      consumes:
      - application/json
      description: Get team list
      parameters:
      - description: All teams
        in: query
        name: all
        type: boolean
      - description: User ID
        in: query
        name: userId
        type: string
      - description: Page
        in: query
        name: page
        type: integer
      - description: Page Size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/body.TeamRead'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/body.BindingError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Get team list
      tags:
      - Team
    post:
      consumes:
      - application/json
      description: Create team
      parameters:
      - description: Team
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/body.TeamCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/body.TeamRead'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/body.BindingError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Create team
      tags:
      - Team
  /teams/{teamId}:
    delete:
      consumes:
      - application/json
      description: Delete team
      parameters:
      - description: Team ID
        in: path
        name: teamId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/body.BindingError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Delete team
      tags:
      - Team
    get:
      consumes:
      - application/json
      description: Get team
      parameters:
      - description: Team ID
        in: path
        name: teamId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/body.TeamRead'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/body.BindingError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Get team
      tags:
      - Team
    post:
      consumes:
      - application/json
      description: Update team
      parameters:
      - description: Team ID
        in: path
        name: teamId
        required: true
        type: string
      - description: Team
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/body.TeamUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/body.TeamRead'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/body.BindingError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Update team
      tags:
      - Team
  /userData:
    get:
      consumes:
      - application/json
      description: Get userdata list
      parameters:
      - description: Want all users
        in: query
        name: all
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/body.UserRead'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Get userdata list
      tags:
      - User data
    post:
      consumes:
      - application/json
      description: Create user data
      parameters:
      - description: User data create
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/body.UserDataCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/body.UserDataRead'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Create user data
      tags:
      - User data
  /userData/{id}:
    delete:
      consumes:
      - application/json
      description: Delete user data by id
      parameters:
      - description: User data ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Delete user data by id
      tags:
      - User data
    get:
      consumes:
      - application/json
      description: Get user data by id
      parameters:
      - description: User data ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/body.UserDataRead'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Get user data by id
      tags:
      - User data
  /users:
    get:
      consumes:
      - application/json
      description: Get user list
      parameters:
      - description: Want all users
        in: query
        name: all
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/body.UserRead'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Get user list
      tags:
      - User
  /users/{userId}:
    get:
      consumes:
      - application/json
      description: Get user by id
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/body.UserRead'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Get user by id
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Update user by id
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      - description: User update
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/body.UserUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/body.UserRead'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Update user by id
      tags:
      - User
  /usersData/{id}:
    post:
      consumes:
      - application/json
      description: Update user data by id, create if not exists
      parameters:
      - description: User data ID
        in: path
        name: id
        required: true
        type: string
      - description: User data update
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/body.UserDataUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/body.UserDataRead'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Update user data by id, create if not exists
      tags:
      - User
  /vm:
    get:
      consumes:
      - application/json
      description: Get list of VMs
      parameters:
      - description: Get all
        in: query
        name: all
        type: boolean
      - description: Filter by user id
        in: query
        name: userId
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/go-deploy_dto_v2_body.VmRead'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Get list of VMs
      tags:
      - VM
    post:
      consumes:
      - application/json
      description: Create VM
      parameters:
      - description: VM body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/go-deploy_dto_v2_body.VmCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/go-deploy_dto_v2_body.VmCreated'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "423":
          description: Locked
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Create VM
      tags:
      - VM
  /vm/{vmId}:
    delete:
      consumes:
      - application/json
      description: Delete VM
      parameters:
      - description: VM ID
        in: path
        name: vmId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/go-deploy_dto_v2_body.VmDeleted'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "423":
          description: Locked
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Delete VM
      tags:
      - VM
    get:
      consumes:
      - application/json
      description: Get VM by id
      parameters:
      - description: VM ID
        in: path
        name: vmId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/go-deploy_dto_v2_body.VmRead'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Get VM by id
      tags:
      - VM
    post:
      consumes:
      - application/json
      description: Update VM
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: VM ID
        in: path
        name: vmId
        required: true
        type: string
      - description: VM update
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/go-deploy_dto_v2_body.VmUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/go-deploy_dto_v2_body.VmUpdated'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "423":
          description: Locked
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Update VM
      tags:
      - VM
  /vms/{vmId}/command:
    post:
      consumes:
      - application/json
      description: Do action
      parameters:
      - description: VM ID
        in: path
        name: vmId
        required: true
        type: string
      - description: Command body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/body.VmAction'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: empty
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Do action
      tags:
      - VM
  /vms/{vmId}/snapshot/{snapshotId}:
    delete:
      consumes:
      - application/json
      description: Delete snapshot
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: VM ID
        in: path
        name: vmId
        required: true
        type: string
      - description: Snapshot ID
        in: path
        name: snapshotId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/go-deploy_dto_v2_body.VmSnapshotRead'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Delete snapshot
      tags:
      - VM
    post:
      consumes:
      - application/json
      description: Get snapshot
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: VM ID
        in: path
        name: vmId
        required: true
        type: string
      - description: Snapshot ID
        in: path
        name: snapshotId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/go-deploy_dto_v2_body.VmSnapshotRead'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Get snapshot
      tags:
      - VM
  /vms/{vmId}/snapshots:
    get:
      consumes:
      - application/json
      description: Get snapshot list
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: VM ID
        in: path
        name: vmId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/go-deploy_dto_v2_body.VmSnapshotRead'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "423":
          description: Locked
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Get snapshot list
      tags:
      - VM
    post:
      consumes:
      - application/json
      description: Create snapshot
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: VM ID
        in: path
        name: vmId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/go-deploy_dto_v2_body.VmSnapshotRead'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Create snapshot
      tags:
      - VM
  /vms/gpus:
    get:
      consumes:
      - application/json
      description: Get list of GPUs
      parameters:
      - description: Only show available GPUs
        in: query
        name: available
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/body.GpuRead'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "423":
          description: Locked
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/sys.ErrorResponse'
      summary: Get list of GPUs
      tags:
      - VM
swagger: "2.0"
